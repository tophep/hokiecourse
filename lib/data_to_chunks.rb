module DataToChunks
	require_relative 'chunk.rb'

  # This module is used to extract "Chunks" from the info files (containing course listings) generated by 
  # scrape_info.rake

  # A Chunk describes and contains a set of lines extracted from an info file
  # Chunks are used as a stepping stone to parse the raw html into database Course objects
  # The data in a chunk describes a single Course
  # Chunks are found by CRN's 
	
  # CRN - Course Registration Number; a unique identifier given to each course by VT
  # CRN's in the info files denote the start of a chunk
  # The end of the chunk is determined by the next CRN or the end of the file


  COURSE_LISTING_DIRECTORY = "#{Rails.root}/info/course_listings/"

  def self.extract_chunks(info)
    chunks = []

    if first_line = first_crn_line(info)

      while num_lines = first_crn_line(info[first_line+1, info.size])

        last_line = first_line + num_lines
        chunks << Chunk.new(info[first_line..last_line])

        num_lines += 1  # account for zero-indexing
        first_line += num_lines
      end
      chunks << extract_end_chunk(info)

    end
  end

  # Returns an array of all the chunks in the info files
  def self.extract_all_chunks
  	chunks = []

  	Subject.all.each do |sub|
      file_path = COURSE_LISTING_DIRECTORY + sub.abbrev + ".html"
      if extracted_chunks = extract_chunks_from_file(file_path)
      	chunks += extracted_chunks
      end
    end
    chunks 
  end

  # Returns an array of all the chunks in the file specified
  def self.extract_chunks_from_file(file_path)
  	if File.exists?(file_path)
  		chunks = []
  		file = open(file_path)
  		info = file.to_a
  		file.close

  		first_line = first_crn_line(info)

  		while num_lines = first_crn_line(info[first_line + 1, info.size])
            
            last_line = first_line + num_lines
            chunks << Chunk.new(info[first_line..last_line])

            num_lines += 1	# account for zero-indexing
            first_line += num_lines
      end
      chunks << extract_end_chunk(info)
  	end
  end

  # Returns the last chunk that could be extracted from the specified array
  def self.extract_end_chunk(info_array)
  	first_line = last_crn_line(info_array)
  	last_line = last_info_line(info_array)
  	Chunk.new(info_array[first_line..last_line], true)
  end

  # Returns a hash of integers pointing to an array containing all the chunks of that size
  def self.all_chunks_by_size
  	chunks = extract_all_chunks
  	chunks_by_size = {}
  	chunks.each do |chunk|
  		if chunks_by_size[chunk.size]
  			chunks_by_size[chunk.size] << chunk
  		else
  			chunks_by_size[chunk.size] = [chunk]
  		end
  	end
  	chunks_by_size
  end

  # Returns a hash of format arrays pointing to an array containing all the chunks of that format
  def self.all_chunks_by_format
  	chunks = extract_all_chunks
  	chunks_by_format = {}
  	chunks.each do |chunk|
  		if chunks_by_format[chunk.format]
  			chunks_by_format[chunk.format] << chunk
  		else
  			chunks_by_format[chunk.format] = [chunk]
  		end
  	end
  	chunks_by_format
  end

  # Returns a CRN if the line contains one, nil otherwise
  def self.extract_crn(line)
    crn = line[/(\A|\D)\d{5}&nbsp/].to_s[/\d{5}/]  # Assumes exactly 5 digits followed by "&nbsp" denotes a crn
  end

  # Returns the index of the first line containing a CRN, nil if no line contains a CRN
  def self.first_crn_line(info_array)
    info_array.each_with_index do |line, index| 
      if extract_crn(line) 
        return index
      end
    end
    return nil
  end

  # Returns the index of the last line containing a CRN, nil if no line contains a CRN
  def self.last_crn_line(info_array)
    if reversed_index = first_crn_line(info_array.reverse)
      info_array.size - (reversed_index + 1)
    end
  end

  # Returns the index of the last blank line, nil if no line is blank
  def self.last_info_line(info_array)
    info_array.reverse_each.with_index do |line, i|
      return info_array.size - (i + 1) if line.blank?
    end
    return nil 
  end
  
end